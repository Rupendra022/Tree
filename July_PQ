1. Height of Binary Tree >- 
class Solution {
    public int maxDepth(TreeNode root) {
        //your code goes here

        if(root==null){
            return 0 ; 
        }
        int lh = maxDepth(root.left);
        int rh = maxDepth(root.right);

        return Math.max(lh,rh)+1 ;
     }
}


2.  Check two tree are identical or not >- 
class Solution {
    // Function to check if two trees are identical.
    boolean isIdentical(Node r1, Node r2) {
        // Code Here
        // RADHE RADHE 
        
        if(r1==null && r2==null){
            return true ; 
        }
        
        if(r1==null || r2==null){
            return false ; 
        }
        if(r1.data!=r2.data){
            return false ; 
        }
        
        return isIdentical(r1.left,r2.left) && isIdentical(r1.right,r2.right);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Diameter of Binary Tree 
class Solution {
    // RADHE RADHE 
    public static int height(Node root , int[] diameter){
        if(root==null){
            return 0 ; 
        }
        
        int lh = height(root.left,diameter);
        int rh = height(root.right,diameter);
        
        diameter[0] = Math.max(diameter[0],lh+rh);
        
        return Math.max(lh,rh)+1 ; 
        
    }
    int diameter(Node root) {
        // Your code here
        
        int[] diameter = new int[1];
        
        height(root,diameter);
        
        return diameter[0] ; 
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------

4. ODD EVEN LEVEL DIFFERENCE >- 
class Solution {
    int getLevelDiff(Node root) {
        // RADHE RADHE 
        // code here
        
        int even = 0 ; 
        int odd = 0 ; 
        int level = 0 ; 
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            
            int sz = q.size(); 
            for(int i = 0 ; i<sz ; i++){
                Node curr = q.poll();
                
                if(level%2==0){
                    even += curr.data ; 
                }
                else{
                    odd += curr.data ; 
                }
                
                if(curr.left!=null)q.add(curr.left);
                if(curr.right!=null) q.add(curr.right);
                
            }
            level++ ; 
            
    }
    return even-odd ;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------
5. MAX SUM OF LEVEL IN BINARY TREE >- 
class Solution {
    public int maxLevelSum(Node root) {
        // add code here.
        
        Queue<Node> q = new LinkedList<>();
        int max = Integer.MIN_VALUE ; 
        q.add(root);
        
        while(!q.isEmpty()){
            int sum = 0 ; 
            int sz = q.size();
            
            for(int i = 0 ; i<sz ; i++){
                Node n = q.poll();
                sum += n.data ; 
                if(n.left!=null) q.add(n.left);
                if(n.right!=null) q.add(n.right);
                
            }
            max = Math.max(max,sum);
        }
        return max ;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------
