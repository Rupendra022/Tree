package Tree;

import java.util.*;

// Node class representing each node of the binary tree
class Node {
    int data;
    Node left;
    Node right;

    // Constructor
    Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

// BinaryTree class to build and traverse the binary tree
class BinaryTree {
    static int idx = -1;

    // Method to build the binary tree from a pre-order traversal array
    public static Node buildTree(int[] nodes) {
        idx++; // Move to next index
        if (nodes[idx] == -1) {
            return null; // -1 means no node (null)
        }

        Node newNode = new Node(nodes[idx]); // Create new node
        newNode.left = buildTree(nodes);     // Recursively build left subtree
        newNode.right = buildTree(nodes);    // Recursively build right subtree

        return newNode;
    }

    // Pre-order traversal: Root -> Left -> Right
    public static void preOrder(Node root) {
        if (root == null) return;

        System.out.print(root.data + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    // In-order traversal: Left -> Root -> Right
    public static void inOrder(Node root) {
        if (root == null) return;

        inOrder(root.left);
        System.out.print(root.data + " ");
        inOrder(root.right);
    }

    // Post-order traversal: Left -> Right -> Root
    public static void postOrder(Node root) {
        if (root == null) return;

        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.data + " ");
    }

    // Level-order traversal (Breadth-First Search)
    public static void levelOrder(Node root) {
        if (root == null) return;

        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null); // null marker to indicate end of level

        while (!q.isEmpty()) {
            Node current = q.remove();

            if (current == null) {
                System.out.println(); // New line after each level
                if (q.isEmpty()) break; // All levels printed
                q.add(null); // Add marker for next level
            } else {
                System.out.print(current.data + " ");
                if (current.left != null) q.add(current.left);
                if (current.right != null) q.add(current.right);
            }
        }
    }
}

// Main class to test binary tree operations
public class binarysearchTreeA {
    public static void main(String[] args) {
        // Tree input in pre-order format, where -1 means null
        int[] nodes = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};

        // Build tree and get the root node
        BinaryTree tree = new BinaryTree();
        Node root = tree.buildTree(nodes);

        // Uncomment the below lines to try different traversals:
        // tree.preOrder(root);      // Output: 1 2 4 5 3 6
        // tree.inOrder(root);       // Output: 4 2 5 1 3 6
        // tree.postOrder(root);     // Output: 4 5 2 6 3 1

        // Level-order traversal:
        tree.levelOrder(root);
        // Output:
        // 1
        // 2 3
        // 4 5 6
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
